@page
@model IndexModel
@{
    ViewData["Title"] = "Chat";
}

<div class="chatPrompts" id="chatPrompts">
</div>

<div class="chatHistory" id="chatHistory"></div>

<div class="input-group mb-3 chatInputContainer" id="chatInputWrapper">
    <input type="text" id="chatInput" class="form-control" placeholder="" aria-label="Type your query here" aria-describedby="basic-addon2">
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" id="chatInputSubmit">Send</button>
    </div>
</div>

@section Scripts {
    <script>
        const generateId = () => {
            try {
                const random = window.crypto.getRandomValues(new Uint32Array(4));
                return random[0].toString(16) + "-" + random[1].toString(16) + "-" + random[2].toString(16) + "-" + random[3].toString(16);
            } catch (e) {
                console.log("Secure random number generation is not supported.");
                return Math.floor(Math.random() * 10000000000).toString();
            }
        }

        const userId = generateId();
        let charBubbleToRemove = null;
        let chatPrompts = document.getElementById("chatPrompts");
        let chatHistory = document.getElementById("chatHistory");
        let chatInputWrapper = document.getElementById("chatInputWrapper");
        let chatInput = document.getElementById("chatInput");
        let chatInputSubmit = document.getElementById("chatInputSubmit");

        const createChatBubble = (text, type) => {
            if (text.length === 0) return null;
            let chatBubble = document.createElement("div");
            chatBubble.classList.add("chatBubble");
            chatBubble.classList.add(type);
            chatBubble.innerText = text;
            chatHistory.appendChild(chatBubble);

            chatInputWrapper.scrollIntoView({ behavior: "smooth" });
            return chatBubble;
        }

        chatInput.addEventListener("keyup", function (event) {
            event.preventDefault();
            if (event.keyCode === 13) {
                chatInputSubmit.click();
            }
        });

        chatInputSubmit.addEventListener("click", function (event) {
            event.preventDefault();
            let chatText = chatInput.value;
            if (chatInput !== "") {
                createChatBubble(chatText, "chatBubbleUser");
                charBubbleToRemove = createChatBubble("...", "chatBubbleAI");
                const json = {
                    "text": chatText,
                    "user": userId
                };
                fetch("/api/chat",
                    {
                        method: "POST",
                        body: JSON.stringify(json),
                        headers: {
                            "Content-Type": "application/json"
                        }
                    })
                    .then(response => {
                        return response.json();
                    })
                    .then(data => {
                        chatHistory.removeChild(charBubbleToRemove);
                        charBubbleToRemove = null;
                        createChatBubble(data.text, "chatBubbleAI");
                    })
                    .catch(error => {
                        console.log(error);
                        chatHistory.removeChild(charBubbleToRemove);
                        charBubbleToRemove = null;
                        createChatBubble(error, "chatBubbleError");
                    });
                chatInput.value = "";
            }
        });

        fetch("/api/chat")
            .then(response => {
                return response.json();
            })
            .then(data => {
                console.log(data);
                for (let i = 0; i < data.prompts.length; i++) {
                    const prompt = data.prompts[i];
                    let promptButton = document.createElement("button");
                    promptButton.classList.add("btn");
                    promptButton.classList.add("btn-outline-secondary");
                    promptButton.classList.add("btn-sm");
                    promptButton.classList.add("chatPromptButton");
                    promptButton.innerText = prompt.title;
                    promptButton.onclick = () => {
                        chatInput.value = "";
                        chatHistory.textContent = "";
                        chatInput.focus();

                        if (prompt.userMessage.length > 0) {
                            createChatBubble(prompt.userMessage, "chatBubbleUser");
                        }
                        charBubbleToRemove = createChatBubble("...", "chatBubbleAI");

                        const json = {
                            "option": i,
                            "user": userId
                        };

                        fetch("/api/chat",
                            {
                                method: "PUT",
                                body: JSON.stringify(json),
                                headers: {
                                    "Content-Type": "application/json"
                                }
                            })
                            .then(response => {
                                return response.json();
                            })
                            .then(data => {
                                chatHistory.removeChild(charBubbleToRemove);
                                charBubbleToRemove = null;
                                createChatBubble(data.text, "chatBubbleAI");
                            })
                            .catch(error => {
                                console.log(error);
                                chatHistory.removeChild(charBubbleToRemove);
                                charBubbleToRemove = null;
                                createChatBubble(error, "chatBubbleError");
                            });
                    }
                    chatPrompts.appendChild(promptButton);
                }
            })
            .catch(error => {
                console.log(error);
            });

        chatInput.focus();
    </script>
}
